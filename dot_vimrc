set number relativenumber
set mouse=a
set shiftwidth=2
set tabstop=2
set expandtab
set ignorecase
set smartcase
set signcolumn=number
set textwidth=100
set formatoptions+=mM
filetype plugin indent on
syntax on
set noshowmode
set laststatus=2
set clipboard=unnamedplus,unnamed
set termguicolors

let g:mapleader = ','
inoremap jj <Esc>
inoremap <Leader>c <C-x><C-o>

function Update_treesitter(info)
  if has('nvim')
    TSUpdate
  endif
endfunction

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'luochen1990/rainbow'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-repeat'
Plug 'chaoren/vim-wordmotion'
Plug 'machakann/vim-sandwich'
Plug 'andymass/vim-matchup'
Plug 'eraserhd/parinfer-rust', {'do':'cargo build --release'}
Plug 'kaarmu/typst.vim'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'nvim-treesitter/nvim-treesitter', {'do': function('Update_treesitter')} 
Plug 'akinsho/toggleterm.nvim', {'tag' : '*'}
Plug 'echasnovski/mini.nvim'
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'
Plug 'neovim/nvim-lspconfig'
Plug 'folke/which-key.nvim'
call plug#end()

try
  map f <Plug>Sneak_s
  map F <Plug>Sneak_S
catch
endtry

if exists('g:neovide')
  set guifont=Hack\ Nerd\ Font,Hack:h16
  set shell=fish
  let g:neovide_scale_factor=1.0
  function! ChangeScaleFactor(delta)
    let g:neovide_scale_factor = g:neovide_scale_factor * a:delta
  endfunction
  nnoremap <expr><C-=> ChangeScaleFactor(1.1)
  nnoremap <expr><C--> ChangeScaleFactor(1/1.1)
endif

if exists('g:vscode')
  set showmode
  let g:rainbow_active = 0
else
  try
    colorscheme onedark
  catch /E185/ 
  endtry
  let g:rainbow_active = 1
endif

if has('nvim')
set completeopt-=preview
lua << EOF
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1
  require('nvim-tree').setup()
  
  require('nvim-treesitter.configs').setup {
    ensure_installed = { 'c', 'vim', 'cpp', 'lua' },

    highlight = {
      enable = true,
      disable = function(lang, buf)
          local max_filesize = 100 * 1024 -- 100 KB
          local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
          if ok and stats and stats.size > max_filesize then
              return true
          end
      end,
      additional_vim_regex_highlighting = false,
    },
  }

  require("toggleterm").setup {
    open_mapping = [[<Leader>t]],
    direction = "float",
  }

  require('mini.align').setup {
    mappings = {
      start = '',
      start_with_preview = 'gA',
    },
  }
  
  require("mason").setup {
  
  }
  
  require("mason-lspconfig").setup {
  
  }

  require('which-key').setup {
  }

  -- Setup language servers.
  local lspconfig = require('lspconfig')
  lspconfig.clangd.setup {
    cmd = {'clangd'}
  }
  lspconfig.typst_lsp.setup{}
  lspconfig.pyright.setup{}

  -- Global mappings.
  -- See `:help vim.diagnostic.*` for documentation on any of the below functions
  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist)

  -- Use LspAttach autocommand to only map the following keys
  -- after the language server attaches to the current buffer
  vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
      -- Enable completion triggered by <c-x><c-o>
      vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

      -- Buffer local mappings.
      -- See `:help vim.lsp.*` for documentation on any of the below functions
      local opts = { buffer = ev.buf }
      vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
      vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
      vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
      vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
      vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
      vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
      vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
      vim.keymap.set('n', '<space>wl', function()
        print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
      end, opts)
      vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
      vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
      vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
      vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
      vim.keymap.set('n', '<space>f', function()
        vim.lsp.buf.format { async = true }
      end, opts)
    end,
  })
EOF
endif
