set number relativenumber
set mouse=a
set shiftwidth=2
set tabstop=2
set expandtab
set ignorecase
set smartcase
set signcolumn=number
set textwidth=100
set formatoptions+=mM
filetype plugin indent on
syntax on
set noshowmode
set laststatus=2
set clipboard=unnamedplus,unnamed
set termguicolors

inoremap jj <Esc>

function Update_treesitter(info)
  if has('nvim')
    TSUpdate
  endif
endfunction

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'luochen1990/rainbow'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-repeat'
Plug 'chaoren/vim-wordmotion'
Plug 'machakann/vim-sandwich'
Plug 'andymass/vim-matchup'
Plug 'eraserhd/parinfer-rust', {'do':'cargo build --release'}
Plug 'kaarmu/typst.vim'
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'nvim-treesitter/nvim-treesitter', {'do': function('Update_treesitter')} 
Plug 'akinsho/toggleterm.nvim', {'tag' : '*'}
call plug#end()

try
  map f <Plug>Sneak_s
  map F <Plug>Sneak_S
catch
endtry

if exists('g:vscode')
  set showmode
  let g:rainbow_active = 0
else
  try
    colorscheme onedark
  catch /E185/ 
  endtry
  let g:rainbow_active = 1
endif

if has('nvim')
lua << EOF
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  require('nvim-tree').setup()
  
  require('nvim-treesitter.configs').setup {
    ensure_installed = { 'c', 'vim', 'cpp', 'lua' },

    highlight = {
      enable = true,
      disable = function(lang, buf)
          local max_filesize = 100 * 1024 -- 100 KB
          local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
          if ok and stats and stats.size > max_filesize then
              return true
          end
      end,
      additional_vim_regex_highlighting = false,
    },
  }

  require("toggleterm").setup {
    open_mapping = [[<F12>]],
    direction = "float",
  }
EOF
endif
